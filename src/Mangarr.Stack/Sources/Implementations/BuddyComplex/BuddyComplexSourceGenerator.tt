<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>

<#
    List<(string,string,string,bool)> models = new()
    {
        ("beehentai","BeeHentai","https://beehentai.com",false),
        ("boxmanhwa","BoxManhwa","https://boxmanhwa.com",false),
        ("mangabuddy","MangaBuddy","https://mangabuddy.com",false),
        ("mangacute","MangaCute","https://mangacute.com",false),
        ("mangaforest","MangaForest","https://mangaforest.me",false),
        ("mangapuma","MangaPuma","https://mangapuma.com",false),
        ("mangasaga","MangaSaga","https://mangasaga.com",false),
        ("mangaspin","MangaSpin","https://mangaspin.com",false),
        ("mangaxyz","MangaXYZ","https://mangaxyz.com",false),
        ("manhuasite","ManhuaSite","https://manhuasite.com",false),
        ("manhwatube","ManhwaTube","https://manhwatube.com",false),
        ("toonilyme","Toonily.me","https://toonily.me",false),
        ("toonitube","TooniTube","https://toonitube.com",false),
        ("truemanga","TrueManga","https://truemanga.com",false)
    };

    foreach ((string, string, string, bool) model in models)
    {
        string fileName = $"{model.Item2.Replace(" ", string.Empty).Replace(".", string.Empty)}Source.g.cs";
        string filePath = Host.ResolvePath(fileName);

        string directoryName = Path.GetDirectoryName(filePath);
        string generatedPath = Path.Combine(directoryName, "Generated");

        if (!Directory.Exists(generatedPath))
            Directory.CreateDirectory(generatedPath);

        string generatedFilePath = Path.Combine(generatedPath, fileName);

        File.WriteAllText(generatedFilePath, GenerateClass(model));
    }
#>

<#+
    public string GenerateClass((string, string, string, bool) model)
    {
        return $@"// Auto generated

using Injectio.Attributes;
using Mangarr.Stack.Sources.Clients;

namespace Mangarr.Stack.Sources.Implementations.BuddyComplex;

[RegisterSingleton<ISource>(Duplicate = DuplicateStrategy.Append)]
internal class {model.Item2.Replace(" ", string.Empty).Replace(".", string.Empty)}Source : BuddyComplexSourceBase
{{
    protected override string Id => ""{model.Item1}"";
    protected override string Name => ""{model.Item2}"";
    protected override string Url => ""{model.Item3}"";
    protected override bool HasCloudflareProtection => {model.Item4.ToString().ToLower()};

    public {model.Item2.Replace(" ", string.Empty).Replace(".", string.Empty)}Source(
        GenericHttpClient genericHttpClient,
        CloudflareHttpClient cloudflareHttpClient,
        ILoggerFactory loggerFactory
    )
        : base(genericHttpClient, cloudflareHttpClient, loggerFactory)
    {{
    }}
}}
";
    }
#>
